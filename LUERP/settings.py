"""
python3 manage.py runserver 0.0.0.0:8083
[root@localhost LUERP]# uwsgi --ini uwsgi.ini
[uWSGI] getting INI configuration from uwsgi.ini
[uwsgi-static] added mapping for /static => /root/LUERP/static
[root@localhost LUERP]# nginx -s reload


Django settings for LUERP project.

Generated by 'django-admin startproject' using Django 2.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/

manage.py inspectdb
1.python manage.py makemigrations
2.python manage.py migrate --database=skucheck

python manage.py migrate --fake <appname>
"""
import os
import sys
import six
#from django.utils import six
from kombu import Exchange, Queue

from meeting import local_settings as ls
from meeting.local_settings import *  # NOQA
from meeting.constance import CONSTANCE_CONFIG  # NOQA
from meeting.celery_annotations import celery_annotations_dict

# 2.5MB - 2621440
# 5MB - 5242880
# 10MB - 10485760
# 20MB - 20971520
# 50MB - 5242880
# 100MB 104857600
# 250MB - 214958080
# 500MB - 429916160
MAX_UPLOAD_SIZE = 52428800


REDIS_CACHE_URL = 'redis://%s%s@%s:%s/%d' % (
    ':' if ls.REDIS_PASSWORD else '',
    ls.REDIS_PASSWORD,
    ls.REDIS_HOST,
    ls.REDIS_PORT,
    ls.REDIS_CACHE_DB)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

if six.PY2 and sys.getdefaultencoding()=='ascii':
    import imp
    imp.reload(sys)
    sys.setdefaultencoding('utf-8')

from django.utils.translation import ugettext_lazy as _

PROJECT_ROOT = os.path.join(
    os.path.realpath(os.path.dirname(__file__)), os.pardir)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4$%!3a2hacepcj*l==!*t14w9mn740a!3s8u#_*kmdapzpr@eb'
#
# # SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#SECRET_KEY = os.environ['SECRET_KEY']
#DEBUG = False
ALLOWED_HOSTS = ['127.0.0.1', '192.168.0.2','localhost','www.umenb.com','*']

REDIS_CACHE_URL = 'redis://%s%s@%s:%s/%d' % (
    ':' if ls.REDIS_PASSWORD else '',
    ls.REDIS_PASSWORD,
    ls.REDIS_HOST,
    ls.REDIS_PORT,
    ls.REDIS_CACHE_DB)
# Application definition
INSTALLED_APPS = [
    # 'admin_totals',
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.humanize',
    'rules',
    # 'daterange_filter',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'T1_SupplierResponse',
    'appalarmset',
    'Tao',
    'syscfg',
    'basedata',
    'organ',
    'workflow',
    'import_export',
    'purchase',
    'tracking',
    'rest_framework',
    'constance',
    'apiview',
    'apps.wechat',
    'apps.meetings',
]
#DATABASE_ROUTERS = ['LUERP.database_router.T100']
#AUTHENTICATION_BACKENDS=( 'LUERP.views.EmailAuthBackend' , )
AUTHENTICATION_BACKENDS = (
    'rules.permissions.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
)

MIDDLEWARE = [
    #'django.contrib.auth.middleware.SessionAuthenticationMiddleware',新版本棄用，引用就報錯
    'tracking.middleware.VisitorTrackingMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'midware.cuser.RequestUser',
    'apiview.middlewares.RequestCompatMiddleware',
]

SESSION_ENGINE = "redis_sessions.session"

SESSION_REDIS = {
    'host': ls.REDIS_HOST,
    'port': ls.REDIS_PORT,
    'db': ls.REDIS_SESSION_DB,
    'password': ls.REDIS_PASSWORD,
    'prefix': 'session',
    'socket_timeout': 1
}

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': [
            '%s:%s' % (ls.REDIS_HOST, ls.REDIS_PORT),
        ],
        'OPTIONS': {
            'DB': ls.REDIS_CACHE_DB,
            'PASSWORD': ls.REDIS_PASSWORD,
            'PARSER_CLASS': 'redis.connection.HiredisParser',
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 50,
                'timeout': 20,
            },
            'MAX_CONNECTIONS': 1000,
            'PICKLE_VERSION': -1,
        },
    },
}


ROOT_URLCONF = 'LUERP.urls'
WSGI_APPLICATION = 'LUERP.wsgi.application'

CHANNEL_LAYERS = {
    "default": {
        "ROUTING": "LUERP.routing.channel_routing",
        "BACKEND": "asgi_redis.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379')],
        },
    },
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
            ],
        },
    },
]
SHORT_DATE_FORMAT = 'Y-m-d'
SHORT_DATETIME_FORMAT = 'Y-m-d P'
# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
TEMPLATE_THEME = 'default'

WSGI_APPLICATION = 'LUERP.wsgi.application'

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',     # 数据库引擎
        'NAME': 'CIMS',                        # 创建的数据库用户名
        'USER': 'openpg',                            # 数据库用户名
        'PASSWORD': 'openpgpwdlhb',                      # 密码
        'HOST': 'localhost',                       # 主机
        'PORT': '5432',                            # 数据库使用的端口
    },
    'T100': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME': 'TOPPRD',
        'HOST': '192.168.0.5',
        'USER': 'dsdata',
        'PASSWORD': 'dsdata',
        'PORT': '1521',
    },
    # 'Trade': {
    #     'ENGINE': 'sql_server.pyodbc',
    #     'NAME': 'trade',
    #     'USER': 'sa',
    #     'PASSWORD': 'yh***microsoft***',
    #     'HOST': '127.0.0.1',
    #     'PORT': '1433',
    #     'OPTIONS': {
    #         'driver': 'SQL Server Native Client 11.0',
    #     },
    # },
    'TAO': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'active',
        'USER': 'lutec',
        'PASSWORD': '9Z8@65ehf',
        'HOST': '116.247.90.134',
        'PORT': '25252',
    },
    # 'MySQL': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': ls.MYSQL_DBNAME,
    #     'USER': ls.MYSQL_USERNAME,
    #     'PASSWORD': ls.MYSQL_PASSWORD,
    #     'HOST': ls.MYSQL_HOST,
    #     'PORT': ls.MYSQL_PORT,
    #     'TEST_CHARSET': "utf8mb4",
    #     'TEST_COLLATION': "utf8mb4_unicode_ci",
    #     'STORAGE_ENGINE': 'INNODB',
    #     'OPTIONS': {
    #         'charset': 'utf8mb4',
    #         'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
    #     },
    # }
}

SUB_DIR = os.path.basename(os.path.dirname(__file__))
DATABASE_ROUTERS = ['LUERP.database_router.DatabaseAppsRouter'.format(SUB_DIR)]
DATABASE_APPS_MAPPING = {
    # example:
    # 'app_name':'database_name',
    'tracking': 'default',
    'organ': 'default',
    'purchase': 'default',
    'basedata': 'default',
    'selfhelp': 'default',
    'syscfg': 'default',
    'workflow': 'default',
    'core': 'default',
    'apps': 'default',
    'admin': 'default',
    'wechat': 'default',
    'meetings': 'default',
    'crispy_forms': 'default',
    'reversion': 'default',
    # 'appalarmset': 'Trade',
    'T1_SupplierResponse':  'T100',
    'Tao': 'TAO',
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'apps.wechat.backends.WechatBackend',
)

STATIC_URL = '/static/'
STATIC_ROOT= 'D:/LUERP/static/'
#STATIC_ROOT = os.path.join(BASE_DIR,'static')
# 生产环境静态资源目录，执行 manage.py collectstatic 后静态文件存放的路径
# STATIC_ROOT = os.path.join(BASE_DIR, 'release', 'static')

STATICFILES_DIRS = (
    ('css',os.path.join(STATIC_ROOT,'css')),
    ('js',os.path.join(STATIC_ROOT,'js')),
    ('img',os.path.join(STATIC_ROOT,'img')),
)
# 设置静态文件目录
#STATIC_PATH = os.path.join(os.path.dirname(__file__), 'static')



# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/
LANGUAGE_CODE = 'zh-hans'
# LANGUAGES = (
#     ('en', _('English')),
#     ('zh-hans', _('Chinese')),
# )
SITE_ID = 1
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
# USE_L10N = True
USE_TZ = False  # 使用本地时间，而不是UTC时间
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]
USE_L10N = False
DATE_FORMAT = 'Y-m-d'
DATETIME_FORMAT = 'Y-m-d H:i:s'
# Static files (CSS, JavaScript, Images)
KILL_CSRF = True
TIME_FORMAT = '%H:%M:%S'
DATETIME_FORMAT = DATE_FORMAT + ' ' + TIME_FORMAT

CONSTANCE_BACKEND = 'constance.backends.redisd.RedisBackend'

CONSTANCE_REDIS_PREFIX = 'constance:'

CONSTANCE_REDIS_CONNECTION = {
    'host': ls.REDIS_HOST,
    'port': ls.REDIS_PORT,
    'db': ls.REDIS_CONSTANCE_DB,
    'password': ls.REDIS_PASSWORD,
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
        'core.parsers.RawParser',

    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'apiview.renderers.JSONPRenderer',
    ],
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.AllowAny',),
    'DATETIME_FORMAT': DATETIME_FORMAT,
    'TIME_FORMAT': TIME_FORMAT,
    'DATE_FORMAT': DATE_FORMAT,
}
if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append('apiview.renderers.BrowsableAPIRenderer')

GRAPPELLI_ADMIN_TITLE = u'管理后台'

ROOT_URLCONF = 'meeting.urls'

DEFAULT_FILE_STORAGE = 'core.storages.EnableUrlFileSystemStorage'

TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates/')

# https://docs.djangoproject.com/en/2.0/howto/static-files/
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s %(process)s.%(thread)s %(levelname)s %(module)s.%(funcName)s %(message)s',
            'datefmt': "%y/%m/%d %H:%M:%S",
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'formatter': 'standard'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
    },
    'loggers': {
        'daphne': {
            'handlers': ['console', ],
            'level': 'DEBUG',
            'propagate': True
        },
        'django': {
            'handlers': ['console', ],
            'level': 'INFO',
            'propagate': True
        },
        'django.db': {
            'handlers': ['console', ],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'mail_admins', ],
            'level': 'ERROR',
            'propagate': False,
        },
        'exception': {
            'handlers': ['console', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False
        },
        '': {
            'handlers': ['console', ],
            'level': 'DEBUG',
            'propagate': True
        }
    },
    'root': {
        'handlers': ['console', ],
        'level': 'DEBUG',
        'propagate': True
    }
}

# 富文本编辑器设置
SUMMERNOTE_CONFIG = {
    # Using SummernoteWidget - iframe mode
    'iframe': True,  # or set False to use SummernoteInplaceWidget - no iframe mode

    # Using Summernote Air-mode
    'airMode': False,

    # Use native HTML tags (`<b>`, `<i>`, ...) instead of style attributes
    'styleWithSpan': False,

    # Change editor size
    'width': '80%',
    'height': '480',

    # Use proper language setting automatically (default)
    'lang': 'zh-CN',

}

MEDIA_URL = '/upload/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'upload')

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'www_static')

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',
)
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/'),
)
# celery settings

CELERY_BROKER_URL = 'redis://%s%s@%s:%s/%d' % (
    ':' if ls.REDIS_PASSWORD else '',
    ls.REDIS_PASSWORD,
    ls.REDIS_HOST,
    ls.REDIS_PORT,
    ls.REDIS_CELERY_DB)

CELERY_RESULT_BACKEND = CELERY_BROKER_URL

CELERY_WORKER_HIJACK_ROOT_LOGGER = False

# 任务执行最长时间20分钟
CELERY_TASK_SOFT_TIME_LIMIT = 1200
CELERY_TASK_TIME_LIMIT = 1200

CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_DEFAULT_QUEUE = 'default'

CELERY_TASK_SERIALIZER = 'pickle'
CELERY_RESULT_SERIALIZER = 'pickle'
CELERY_ACCEPT_CONTENT = ['pickle', 'json']

# 定义执行队列
CELERY_TASK_QUEUES = (
    Queue('default', Exchange('default'), routing_key='default'),
    Queue('crontab', Exchange('crontab'), routing_key='crontab'),
    Queue('async', Exchange('async'), routing_key='async')
)

# 制定特定任务路由到特定执行队列
CELERY_TASK_ROUTES = {
    'meeting.celery._async_call': {'queue': 'async', 'routing_key': 'async'},
}

CELERY_TASK_ANNOTATIONS = {'*': celery_annotations_dict}


ERROR_CODE_DEFINE = (
    ('ERR_PAGE_SIZE_ERROR',          -1001,  '页码大小超限'),

    ('ERR_WECHAT_LOGIN',             10001,  '需要登录'),

    ('ERR_MEETING_ROOM_TIMEOVER',    20001,  '时间已过'),
    ('ERR_MEETING_ROOM_INUSE',       20002,  '时间冲突'),
)
